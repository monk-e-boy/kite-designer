[gd_scene load_steps=23 format=2]

[ext_resource path="res://MyMesh.gd" type="Script" id=1]
[ext_resource path="res://LeadingEdgeSection.tscn" type="PackedScene" id=2]
[ext_resource path="res://TriangleColours.gd" type="Script" id=3]
[ext_resource path="res://Axis_.gd" type="Script" id=4]
[ext_resource path="res://addons/orbit_camera/orbit_camera.gd" type="Script" id=6]
[ext_resource path="res://YAxis.gd" type="Script" id=7]
[ext_resource path="res://LESkeleton.gd" type="Script" id=8]
[ext_resource path="res://Profiles.gd" type="Script" id=9]
[ext_resource path="res://Skin.gd" type="Script" id=10]
[ext_resource path="res://SkinOutline.gd" type="Script" id=11]

[sub_resource type="SpatialMaterial" id=2]
flags_unshaded = true
params_cull_mode = 2
albedo_color = Color( 0.682353, 0.682353, 0.682353, 1 )

[sub_resource type="SpatialMaterial" id=3]
flags_unshaded = true
albedo_color = Color( 0.784314, 0, 0, 1 )

[sub_resource type="SpatialMaterial" id=4]
flags_unshaded = true
params_cull_mode = 2
albedo_color = Color( 0, 0.784314, 0, 1 )

[sub_resource type="SpatialMaterial" id=5]
flags_unshaded = true
albedo_color = Color( 0, 0, 0.784314, 1 )

[sub_resource type="SpatialMaterial" id=6]
flags_unshaded = true
params_cull_mode = 2
albedo_color = Color( 0.192157, 0.713726, 0.14902, 1 )

[sub_resource type="SpatialMaterial" id=7]
flags_unshaded = true
flags_no_depth_test = true
albedo_color = Color( 0.862745, 0.262745, 0.811765, 1 )

[sub_resource type="Environment" id=8]
background_mode = 1
background_color = Color( 0.556863, 0.760784, 0.643137, 1 )

[sub_resource type="ShaderMaterial" id=9]

[sub_resource type="SpatialMaterial" id=10]
flags_unshaded = true
albedo_color = Color( 0, 0, 0, 1 )

[sub_resource type="SpatialMaterial" id=11]
params_cull_mode = 2
albedo_color = Color( 0.337255, 0.643137, 0.913725, 1 )

[sub_resource type="SpatialMaterial" id=12]
flags_unshaded = true
albedo_color = Color( 0.615686, 0.0901961, 0.447059, 1 )

[sub_resource type="GDScript" id=13]
script/source = "extends MeshInstance

export(SpatialMaterial) var material




class LEnd:
	var points = []
	var profile = null


	func _init(profile):
		self.profile = profile
		self.points = tube_end(0.3)


	func tube_end(radius: float):
		var p = Vector3(0,radius,0)
		var count = 20
		var angle = 360.0 / count
		var tip_attach_angle = 0
		
		var points = []
		for i in range(count):
			points.append(p.rotated(Vector3(1,0,0), deg2rad(angle*i)))
			
#		for i in range(points.size()):
#			points[i] = points[i].rotated(Vector3(0,0,1), deg2rad(tube_angle_z))
			
		# Connect edge of LE tube to profile
		for i in range(points.size()):
			points[i] -= p
			
		# rotate around X (the tip of the profile)
		for i in range(points.size()):
			points[i] = points[i].rotated(Vector3(1,0,0), deg2rad(tip_attach_angle))
		
		#
		# Apply some of the transforms of the parent profile
		#
		var atts = self.profile.atts
		var center_y = 1.0
		
		#for i in range(points.size()):
	#		points[i] = points[i].rotated(Vector3(1,0,0), deg2rad(atts[\"AoA\"]))
			
		# sweep - move in Z
		for i in range(points.size()):
			points[i] += Vector3(0, 0, atts[\"sweep\"])
			
		# rotate around Z -> C shaped kite
		for i in range(points.size()):
			points[i] = points[i].rotated(Vector3(0,0,1), deg2rad(atts[\"angle\"]))
		
		# Push RIGHT
		for i in range(points.size()):
			points[i] += Vector3(atts[\"distance\"],0,0)
			
		# rotate DOWN
		for i in range(points.size()):
			points[i] = points[i].rotated(Vector3(0,0,1), deg2rad(atts[\"offset-y-angle\"]))
		
		# TRANSLATE Y ... we are
		for i in range(points.size()):
			points[i] += Vector3(0,center_y,0)
		
		return points



class LEnd_Elbow:
	var points = []
	var profile = null


	func _init(profile):
		self.profile = profile
		self.points = tube_end(0.3)


	func tube_end(radius: float):
		var p = Vector3(0,radius,0)
		var count = 20
		var angle = 360.0 / count
		var tip_attach_angle = 0
		
		var points = []
		for i in range(count):
			points.append(p.rotated(Vector3(1,0,0), deg2rad(angle*i)))

		# ELBOW JOINT - rotate around Y
		for i in range(points.size()):
			points[i] = points[i].rotated(Vector3(0,1,0), deg2rad(45))
	
		#for i in range(points.size()):
		#	points[i] = points[i].rotated(Vector3(0,0,1), deg2rad(tube_angle_z))
			
		# Connect edge of LE tube to profile
		for i in range(points.size()):
			points[i] -= p
			
		# rotate around X (the tip of the profile)
		for i in range(points.size()):
			points[i] = points[i].rotated(Vector3(1,0,0), deg2rad(tip_attach_angle))
		
		#
		# Apply some of the transforms of the parent profile
		#
		var atts = self.profile.atts
		var center_y = 1.0
		
		#for i in range(points.size()):
	#		points[i] = points[i].rotated(Vector3(1,0,0), deg2rad(atts[\"AoA\"]))
			
		# sweep - move in Z
		for i in range(points.size()):
			points[i] += Vector3(0, 0, atts[\"sweep\"])
			
		# rotate around Z -> C shaped kite
		for i in range(points.size()):
			points[i] = points[i].rotated(Vector3(0,0,1), deg2rad(atts[\"angle\"]))
		
		# Push RIGHT
		for i in range(points.size()):
			points[i] += Vector3(atts[\"distance\"],0,0)
			
		# rotate DOWN
		for i in range(points.size()):
			points[i] = points[i].rotated(Vector3(0,0,1), deg2rad(atts[\"offset-y-angle\"]))
		
		# TRANSLATE Y ... we are
		for i in range(points.size()):
			points[i] += Vector3(0,center_y,0)
		
		return points


class LEnd_YYY:
	var points = []
	var profile = null


	func _init(profile):
		self.profile = profile
		self.points = tube_end(0.3)


	func tube_end(radius: float):
		var p = Vector3(0,radius,0)
		var count = 20
		var angle = 360.0 / count
		
		var points = []
		# Create a circle of points
		for i in range(count):
			points.append(p.rotated(Vector3(1,0,0), deg2rad(angle*i)))
			
		# ELBOW JOINT - rotate around Y
		for i in range(points.size()):
			points[i] = points[i].rotated(Vector3(0,1,0), deg2rad(90))
	
		#for i in range(points.size()):
		#	points[i] = points[i].rotated(Vector3(0,0,1), deg2rad(tube_angle_z))
			
		# Connect edge of LE tube to profile
		for i in range(points.size()):
			points[i] -= p
	
		# rotate around X (the tip of the profile)
#		for i in range(points.size()):
#			points[i] = points[i].rotated(Vector3(1,0,0), deg2rad(45))
		
		#
		# move to TRAILING EDGE of profile
		#
		#var end_pos = self.profile.points[self.profile.points.size()-1]
		var end_pos = Vector3(0, 0, -self.profile.atts[\"length\"])
		for i in range(points.size()):
			points[i] += end_pos
		#
		#
		#
		
		#
		# Apply some of the transforms of the parent profile
		#
		var atts = self.profile.atts
		var center_y = 1.0
		
		for i in range(points.size()):
			points[i] = points[i].rotated(Vector3(1,0,0), deg2rad(atts[\"AoA\"]))
			
		# sweep - move in Z
		for i in range(points.size()):
			points[i] += Vector3(0, 0, atts[\"sweep\"])
			
		# rotate around Z -> C shaped kite
		for i in range(points.size()):
			points[i] = points[i].rotated(Vector3(0,0,1), deg2rad(atts[\"angle\"]))
		
		# Push RIGHT
		for i in range(points.size()):
			points[i] += Vector3(atts[\"distance\"],0,0)
			
		# rotate DOWN
		for i in range(points.size()):
			points[i] = points[i].rotated(Vector3(0,0,1), deg2rad(atts[\"offset-y-angle\"]))
		
		# TRANSLATE Y ... we are
		for i in range(points.size()):
			points[i] += Vector3(0,center_y,0)
		
		return points

func _ready():
	var surface_tool = SurfaceTool.new()
	var mesh = Mesh.new()
	surface_tool.begin(Mesh.PRIMITIVE_LINES)
	surface_tool.set_material(material)
	
	build(surface_tool)
	
	surface_tool.generate_normals()
	surface_tool.commit(mesh)
	self.set_mesh(mesh)


func mid_angle(surface_tool):
	var a = Vector3(-1,0,0)
	var b = Vector3(-2,-1,0)
	var c = Vector3(-3,-1,1)
	
	# HACK - SKELETON HACK
	surface_tool.add_vertex(a)
	surface_tool.add_vertex(b)
	
	surface_tool.add_vertex(b)
	surface_tool.add_vertex(c)
	
	# b points towards the joint - flip b so it points away
	var start = (b-a) * -1
	var tmp = c-b
	var end = start + tmp
	surface_tool.add_vertex(b)
	surface_tool.add_vertex(end+b)
	

func build(surface_tool):
	#var pts = tube_end(Vector3(0,0,0), 0, 1)
	
	var ends = []
	
	var profiles = get_parent().profiles
	
	for p in range(profiles.size()-1):
		var e = LEnd.new(profiles[p])
		ends.append(e)
		draw_end(surface_tool, e.points)
	
	# HACK - elbow and oval
	var e1 = LEnd.new(profiles[0])
	# 45 DEG
	var pp = profiles[profiles.size()-1]
	var e2 = LEnd_Elbow.new(pp)
	ends.append(e2)
	draw_end(surface_tool, e2.points)
	
	# HACK END OF PROFILE
	#
	var e3 = LEnd_YYY.new(pp)
	ends.append(e3)
	draw_end(surface_tool, e3.points)
	
	mid_angle(surface_tool)
	
	# tube
	if false:
		for ex in range(ends.size()-1):
			var e_1 = ends[ex]
			var e_2 = ends[ex+1]
			for i in range(e_1.points.size()):
				surface_tool.add_vertex(e_1.points[i])
				surface_tool.add_vertex(e_2.points[i])
	


func draw_end(surface_tool, points):
	for i in range(points.size()-1):
		surface_tool.add_vertex(points[i])
		surface_tool.add_vertex(points[i+1])
		
	surface_tool.add_vertex(points[points.size()-1])
	surface_tool.add_vertex(points[0])

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass
"

[node name="Spatial" type="Spatial"]

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, 0.707107, 0.707107, 0, -0.707107, 0.707107, 0, 3, 3 )

[node name="DirectionalLight2" type="DirectionalLight" parent="."]
transform = Transform( 0.866025, 0, -0.5, 0, 1, 0, 0.5, 0, 0.866025, 0, -2, 5 )

[node name="ImmediateGeometry" type="ImmediateGeometry" parent="."]
visible = false
use_in_baked_light = true
script = ExtResource( 1 )

[node name="TriangleColours" type="MeshInstance" parent="."]
visible = false
script = ExtResource( 3 )

[node name="Axis" type="MeshInstance" parent="."]
script = ExtResource( 4 )
material_minor = SubResource( 2 )
material_x = SubResource( 3 )
material_y = SubResource( 4 )
material_z = SubResource( 5 )

[node name="YAxis" type="MeshInstance" parent="Axis"]
script = ExtResource( 7 )
material = SubResource( 6 )

[node name="LeadingEdge" type="Node" parent="."]

[node name="LeadingEdgeSection" parent="LeadingEdge" instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )

[node name="LESkeleton" type="MeshInstance" parent="LeadingEdge"]
script = ExtResource( 8 )
material = SubResource( 7 )

[node name="OrbitCameraFocus" type="Spatial" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0 )

[node name="OrbitCamera" type="Camera" parent="OrbitCameraFocus"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 3 )
environment = SubResource( 8 )
script = ExtResource( 6 )
DEFAULT_DISTANCE = 5.0
ROTATE_SPEED = 5.0
ANCHOR_NODE_PATH = NodePath("..")

[node name="GUI" type="Node" parent="."]

[node name="GridContainer" type="GridContainer" parent="GUI"]
material = SubResource( 9 )
margin_left = 882.0
margin_right = 1024.0
margin_bottom = 106.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="CheckButton" type="CheckButton" parent="GUI/GridContainer"]
margin_right = 135.0
margin_bottom = 40.0
text = "Skeleton"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Button" type="Button" parent="GUI/GridContainer"]
margin_top = 44.0
margin_right = 135.0
margin_bottom = 64.0
text = "Export .svg"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Node" type="Node" parent="."]

[node name="Profiles" type="MeshInstance" parent="Node"]
visible = false
script = ExtResource( 9 )
material = SubResource( 10 )

[node name="Skin" type="MeshInstance" parent="Node/Profiles"]
process_priority = 1
script = ExtResource( 10 )
material = SubResource( 11 )

[node name="SkinOutline" type="MeshInstance" parent="Node/Profiles/Skin"]
process_priority = 2
visible = false
script = ExtResource( 11 )
material = SubResource( 12 )

[node name="LE" type="MeshInstance" parent="Node/Profiles"]
script = SubResource( 13 )
[connection signal="toggled" from="GUI/GridContainer/CheckButton" to="Node/Profiles/Skin" method="_on_CheckButton_toggled"]
[connection signal="pressed" from="GUI/GridContainer/Button" to="Node/Profiles/Skin/SkinOutline" method="_on_Button_pressed"]
